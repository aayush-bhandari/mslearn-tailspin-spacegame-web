trigger:
- '*'

pool:
  vmImage: 'ubuntu-20.04'
  demands:
  - npm

variables:
  buildConfiguration: 'Release'

steps:

#exp 1
- script: 'mkdir -p $(Build.SourcesDirectory)/tmp-gzip/hashed-assets'
  workingDirectory: $(Build.SourcesDirectory)
- script: 'echo "Hello World" > tmp-gzipHello.txt'
  displayName: 'Write hello1'
  workingDirectory: $(Build.SourcesDirectory)/tmp-gzip/hashed-assets

- script: 'mkdir -p $(Build.SourcesDirectory)/tmp-gzip/other1'
  workingDirectory: $(Build.SourcesDirectory)
- script: 'mkdir -p $(Build.SourcesDirectory)/tmp-gzip/other2/subOther2'
  workingDirectory: $(Build.SourcesDirectory)

- script: 'echo "Hello World" > other1.txt'
  workingDirectory: $(Build.SourcesDirectory)/tmp-gzip/other1
- script: 'echo "Hello World" > subOther2.txt'
  workingDirectory: $(Build.SourcesDirectory)/tmp-gzip/other2/subOther2

#tmp dir
- script: 'mkdir -p $(Build.SourcesDirectory)/tmp/hashed-assets'
  workingDirectory: $(Build.SourcesDirectory)
- script: 'echo "Hello World" > tmpHello.txt'
  displayName: 'Write hello1'
  workingDirectory: $(Build.SourcesDirectory)/tmp/hashed-assets

- script: 'mkdir -p $(Build.SourcesDirectory)/tmp/other1'
  workingDirectory: $(Build.SourcesDirectory)
- script: 'mkdir -p $(Build.SourcesDirectory)/tmp/other2/subOther2'
  workingDirectory: $(Build.SourcesDirectory)

- script: 'echo "Hello World" > other1.txt'
  workingDirectory: $(Build.SourcesDirectory)/tmp/other1
- script: 'echo "Hello World" > subOther2.txt'
  workingDirectory: $(Build.SourcesDirectory)/tmp/other2/subOther2

- template: copy-publish.yml@self
  parameters:
    artifactName: 'all_exp_1'
    contents: | 
      $(Build.SourcesDirectory)/tmp-gzip/**
      $(Build.SourcesDirectory)/tmp/**

- script: 'find $(Build.SourcesDirectory)/ -type d -name "tmp-gzip" -exec rm -rf {} + -print0'
  displayName: 'delete gzip'
  workingDirectory: $(Build.SourcesDirectory)
- script: 'find $(Build.SourcesDirectory)/ -type d -name "tmp" -exec rm -rf {} + -print0'
  displayName: 'delete tmp'
  workingDirectory: $(Build.SourcesDirectory)

#exp 2

- script: 'mkdir -p $(Build.SourcesDirectory)/tmp-gzip/hashed-assets'
  workingDirectory: $(Build.SourcesDirectory)
- script: 'echo "Hello World" > tmp-gzip_exp2.txt'
  displayName: 'Write hello1'
  workingDirectory: $(Build.SourcesDirectory)/tmp-gzip/hashed-assets

- script: 'mkdir -p $(Build.SourcesDirectory)/tmp-gzip/other1Exp2'
  workingDirectory: $(Build.SourcesDirectory)
- script: 'mkdir -p $(Build.SourcesDirectory)/tmp-gzip/other2Exp2/subOther2Exp2'
  workingDirectory: $(Build.SourcesDirectory)

- script: 'echo "Hello World" > other1.txt'
  workingDirectory: $(Build.SourcesDirectory)/tmp-gzip/other1Exp2
- script: 'echo "Hello World" > subOther2.txt'
  workingDirectory: $(Build.SourcesDirectory)/tmp-gzip/other2Exp2/subOther2Exp2

#tmp dir
- script: 'mkdir -p $(Build.SourcesDirectory)/tmp/hashed-assets'
  workingDirectory: $(Build.SourcesDirectory)
- script: 'echo "Hello World" > tmpHelloExp2.txt'
  displayName: 'Write hello1'
  workingDirectory: $(Build.SourcesDirectory)/tmp/hashed-assets

- script: 'mkdir -p $(Build.SourcesDirectory)/tmp/other1Exp2'
  workingDirectory: $(Build.SourcesDirectory)
- script: 'mkdir -p $(Build.SourcesDirectory)/tmp/other2Exp2/subOther2Exp2'
  workingDirectory: $(Build.SourcesDirectory)

- script: 'echo "Hello World" > other1Exp2.txt'
  workingDirectory: $(Build.SourcesDirectory)/tmp/other1Exp2
- script: 'echo "Hello World" > subOther2Exp2.txt'
  workingDirectory: $(Build.SourcesDirectory)/tmp/other2Exp2/subOther2Exp2

- template: copy-publish.yml@self
  parameters:
    artifactName: 'all_exp_2'
    contents: | 
      $(Build.SourcesDirectory)/tmp-gzip/**
      $(Build.SourcesDirectory)/tmp/**

- script: 'find $(Build.ArtifactStagingDirectory)/ -type d -name "tmp-gzip" -exec rm -rf {} + -print0'
  displayName: 'clean staging dir'
  workingDirectory: $(Build.ArtifactStagingDirectory)
- script: 'find $(Build.ArtifactStagingDirectory)/ -type d -name "tmp" -exec rm -rf {} + -print0'
  displayName: 'clean staging dir'
  workingDirectory: $(Build.ArtifactStagingDirectory)

- script: 'mkdir -p $(Build.ArtifactStagingDirectory)/tmp-gzip/hashed-assets'
  displayName: 'create folder'
  workingDirectory: $(Build.ArtifactStagingDirectory)

- script: 'mkdir -p $(Build.ArtifactStagingDirectory)/tmp'
  displayName: 'create folder'
  workingDirectory: $(Build.ArtifactStagingDirectory)

- script: 'mkdir -p $(Build.SourcesDirectory)/DownloadedArtifacts'
  displayName: 'create folder'
  workingDirectory: $(Build.SourcesDirectory)

- task: DownloadPipelineArtifact@2
  displayName: 'Download artifacts'
  inputs:
    patterns: '*[1-2]/**/*'
    path: $(Build.SourcesDirectory)/DownloadedArtifacts

- task: CopyFiles@2
  inputs:
    contents: '$(Build.SourcesDirectory)/DownloadedArtifacts/*[1-2]/tmp-gzip/**/hashed-assets/**'
    targetFolder: '$(Build.ArtifactStagingDirectory)/tmp-gzip/hashed-assets'
    flattenFolders: true
    cleanTargetFolder: true

- task: CopyFiles@2
  inputs:
    contents: '$(Build.SourcesDirectory)/DownloadedArtifacts/*[1-2]/tmp/**/hashed-assets/**'
    targetFolder: '$(Build.ArtifactStagingDirectory)/tmp/hashed-assets'
    flattenFolders: true
    cleanTargetFolder: true

- script: 'find $(Build.SourcesDirectory)/DownloadedArtifacts/ -type d -name "hashed-assets" -exec rm -rf {} + -print0'
  displayName: 'delete hashed-assests'
  workingDirectory: $(Build.SourcesDirectory)/DownloadedArtifacts 

- script: |
    mv $(Build.SourcesDirectory)/DownloadedArtifacts/*[1-2]/tmp-gzip/** $(Build.ArtifactStagingDirectory)/tmp-gzip/
    mv $(Build.SourcesDirectory)/DownloadedArtifacts/*[1-2]/tmp/** $(Build.ArtifactStagingDirectory)/tmp/
  displayName: 'move folders'
  workingDirectory: $(Build.ArtifactStagingDirectory)

- script: 'ls'
  displayName: 'list folders'
  workingDirectory: $(Build.ArtifactStagingDirectory)

- task: PublishBuildArtifacts@1
  inputs:
    pathToPublish: $(Build.ArtifactStagingDirectory)
    artifactName: 'BuildArtifacts'
    